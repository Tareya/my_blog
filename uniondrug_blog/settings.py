"""
Django settings for uniondrug_blog project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

import pymysql
pymysql.install_as_MySQLdb()

import os, sys , time, logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*8x2sof1x_%!b+jv(f9-e80(q!mb_o$i*0nq@x!55%%eeegmw5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'rest_framework',
    'article.apps.ArticleConfig',
    'comment.apps.CommentConfig',
    'user_info.apps.UserInfoConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'uniondrug_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uniondrug_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'uniondrug_blog',
        'USER': 'uniondrug',
        'PASSWORD': '%I!g69kvtye%Ne73',
        'HOST': '47.99.195.100',
        'PORT': 13306,
        'OPTIONS': {
            'charset': 'utf8',
            'init_command': 'SET default_storage_engine=INNODB;'
        }
    }
}


# 新版drf schema_class默认用的是rest_framework.schemas.openapi.AutoSchema

# REST_FRAMEWORK = {
#     'DEFAULT_SCHEMA_CLASS': {
#         'rest_framework.schemas.coreapi.AutoSchema',
#         'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
#     },
#     'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
# }

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL  = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")


MEDIA_URL  = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


'''Session Configuration'''
SESSION_COOKIE_AGE = 60 * 60 


'''simpleui Configuration'''
# 指定simpleui默认的主题,指定一个文件名，相对路径就从simpleui的theme目录读取
SIMPLEUI_DEFAULT_THEME = 'highdmin.css'

SIMPLEUI_LOGO = 'https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/KyXfCrME6UKe61SDRX94pnAwJfibZKK8HbSAnXnJo4ldiaEPooRqZrIgEICblKLRXxS12hXZw3x7dwstHnLtz9Dg/640?wx_fmt=png'

# SIMPLEUI_HOME_PAGE = ''

# SIMPLEUI_HOME_TITLE = '百度一下你就知道'

# SIMPLEUI_HOME_ICON = 'fa fa-home'

SIMPLEUI_HOME_ACTION = True
SIMPLEUI_HOME_QUICK = True
SIMPLEUI_HOME_INFO = False

SIMPLEUI_CONFIG = {
    'system_keep': False,
    'menu_display': ['权限认证', '动态菜单测试'],      # 开启排序和过滤功能, 不填此字段为默认排序和全部显示, 空列表[] 为全部不显示.
    'dynamic': True,    # 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时动态展示菜单内容
    'menus': [{
        'app': 'auth',
        'name': '权限认证',
        'icon': 'fas fa-user-shield',
        'models': [{
            'name': '用户',
            'icon': 'fa fa-user',
            'url': 'auth/user/'
        }, {
            'name': '用户组',
            'icon': 'fa fa-users',
            'url': 'auth/group/'
        }]
    }, {
        'name': '动态菜单测试' ,
        'icon': 'fa fa-desktop',
        'models': [{
            'name': time.time(),
            'url': 'http://baidu.com',
            'icon': 'far fa-surprise'
        }]
    }]
}


'''LDAP Configuration'''
import ldap 
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, ActiveDirectoryGroupType


#修改Django认证先走ldap，再走本地认证
AUTHENTICATION_BACKENDS = (
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.AllowAllUsersModelBackend",
    # "django.contrib.auth.backends.ModelBackend",

)

#ldap的连接基础配置
AUTH_LDAP_SERVER_URI = "ldap://192.168.3.253:389"
AUTH_LDAP_BIND_DN = "CN=ldap-services,CN=Users,DC=uniondrug,DC=com"
AUTH_LDAP_BIND_PASSWORD = 'P@ssw0rd@1qaz'

#允许认证用户的路径
AUTH_LDAP_USER_SEARCH = LDAPSearch("OU=UniondrugUsers,DC=uniondrug,DC=com", ldap.SCOPE_SUBTREE,
                                   "(sAMAccountName=%(user)s)")
#通过组进行权限控制
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("OU=UniondrugGroups,DC=uniondrug,DC=com", ldap.SCOPE_SUBTREE,
                                    "(objectClass=groupOfNames)")

# 定义LDAP模式
# AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()
# #is_staff:这个组里的成员可以登录；is_superuser:组成员是django admin的超级管理员；is_active:组成员可以登录django admin后台，但是无权限查看后台内容
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#  "is_staff": "cn=test_users,ou=groups,OU=test,DC=test,DC=com",
#  "is_superuser": "cn=test_users,ou=groups,OU=tset,DC=test,DC=com",
# }
# #通过组进行权限控制end

# AD LDAP 模式
AUTH_LDAP_GROUP_TYPE = ActiveDirectoryGroupType()
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_DEBUG_LEVEL: 1,
    ldap.OPT_REFERRALS: 0,
}

#当ldap用户登录时，从ldap的用户属性对应写到django的user数据库，键为django的属性，值为ldap用户的属性
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

#如果为True，每次组成员都从ldap重新获取，保证组成员的实时性；反之会对组成员进行缓存，提升性能，但是降低实时性
# AUTH_LDAP_FIND_GROUP_PERMS = True